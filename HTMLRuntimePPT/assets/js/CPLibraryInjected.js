if (typeof console === "undefined" || typeof console.log === "undefined") 
{
	console = {};
	console.log = function() {};
}


if (!window['Node']) {
    window.Node = new Object();
    Node.ELEMENT_NODE = 1;
    Node.ATTRIBUTE_NODE = 2;
    Node.TEXT_NODE = 3;
    Node.CDATA_SECTION_NODE = 4;
    Node.ENTITY_REFERENCE_NODE = 5;
    Node.ENTITY_NODE = 6;
    Node.PROCESSING_INSTRUCTION_NODE = 7;
    Node.COMMENT_NODE = 8;
    Node.DOCUMENT_NODE = 9;
    Node.DOCUMENT_TYPE_NODE = 10;
    Node.DOCUMENT_FRAGMENT_NODE = 11;
    Node.NOTATION_NODE = 12;
}

if(!Array.indexOf){
	    Array.prototype.indexOf = function(obj){
	        for(var i=0; i<this.length; ++i){
	            if(this[i]==obj){
	                return i;
	            }
	        }
	        return -1;
	    }
	}
(function () {

	var debug = false;
	
	// Base Interface
	function IObject() 
	{ 

	}
	window.getPageX = function(e){		
		var lXPos = 0;
		if(cp.m_gestureHandler)
			lXPos = cp.m_gestureHandler.getEventPageX(e);

		return lXPos;
	};
	window.getPageY = function(e){
		var lYPos = 0;
		if(cp.m_gestureHandler)
			lYPos = cp.m_gestureHandler.getEventPageY(e);

		return lYPos;	
	};	

	//------------------------------
	cp.CacheView = function(index)
	{
		this.index = index;
		
		if(!cp.CacheView.DIM)
		{
			cp.CacheView.DIM = 20;
			cp.CacheView.GAP = 5;
			cp.CacheView.LEFT_OFFSET = 100;
			cp.CacheView.TOP_OFFSET = 30;
			cp.CacheView.NUM_CACHE_VIEWS = 0;
		}
		
		this.view = cp.newElem("div");
		document.body.appendChild(this.view);
		
		this.view.style.cssText = "z-index:100;display:block; position:fixed; left:"+(cp.CacheView.LEFT_OFFSET + cp.CacheView.NUM_CACHE_VIEWS * (cp.CacheView.DIM+cp.CacheView.GAP))+"px; top:" + cp.CacheView.TOP_OFFSET + "px; width:" + cp.CacheView.DIM +"px; height:"+cp.CacheView.DIM+"px; background-color:#555555;opacity:0.8";
		this.view.innerHTML = "<font color='#000000' style='font-size:10px'>-1</font>";
		++cp.CacheView.NUM_CACHE_VIEWS;
	}

	cp.CacheView.prototype = 
	{
		update:function()
		{
			var i = cp.movie.pm.cache[this.index];
			this.view.innerHTML = "<font color='#000000' style='font-size:10px'>" + i + "</font>";
			
			if(this.index == cp.movie.pm.tail)
			{
				this.view.style.backgroundColor = '#ffff00';
			}
			else if(this.index == cp.movie.pm.head)
			{
				this.view.style.backgroundColor = '#0000ff';
			}
			else if(i != -1)
			{
				this.view.style.backgroundColor = '#00ff00';
			}
			else
			{
				this.view.style.backgroundColor = '#555555';
			}
		}
	}
	
	cp.PrefetchManager = function()
	{
		cp.movie.pm = this;
		if(cp.device == cp.DESKTOP)
			this.cache = new Array(6+1);
		else
			this.cache = new Array(3+1);
			
		for(var i =0; i < this.cache.length; ++i)
			this.cache[i] = -1;
			
		this.head = 0;
		this.tail = 0;
		this.viewCache = false;
	}

	function internalUnloadSlideAssets(slideIndex)
	{
		var stage = cp.movie.stage;
		var SlideName = stage.slides[slideIndex];
		var SlideData = cp.D[SlideName];
		
		var SlideCanvasName = SlideData["mdi"];
		var SlideCanvas = cp.D[SlideCanvasName];
		var SlideImageSrc = SlideCanvas["ip"];
		
		if(SlideImageSrc != '')
		{
			cp.movie.im.unloadImage(slideIndex, SlideImageSrc);
		}

		var SlideItems = SlideData["si"];

		if(SlideItems)
		{
			for (var k=0; k<SlideItems.length; ++k)
			{
				var slideItemName = SlideItems[k].n;
				var slideItemData = cp.D[slideItemName];
									
				var slideItemDrawingPropertiesItemName = slideItemData["mdi"];
				var slideItemDrawingPropertiesItemData = cp.D[slideItemDrawingPropertiesItemName];
				if(slideItemDrawingPropertiesItemData)
				{
					var slideItemDisplayResourceSrc = slideItemDrawingPropertiesItemData["ip"];
					if(slideItemDisplayResourceSrc)
					{
						var isRestOfProject = false;
						if(!slideItemData['pa'])
							isRestOfProject = slideItemData['rp'] == '1';
						if(!isRestOfProject)
						{
							cp.movie.im.unloadImage(slideIndex, slideItemDisplayResourceSrc);
							
							slideItemDisplayResourceSrc = slideItemDrawingPropertiesItemData[ 'uImg' ];
							if(slideItemDisplayResourceSrc)
								cp.movie.im.unloadImage(slideIndex, slideItemDisplayResourceSrc);
							slideItemDisplayResourceSrc = slideItemDrawingPropertiesItemData[ 'hImg' ];
							if(slideItemDisplayResourceSrc)
								cp.movie.im.unloadImage(slideIndex, slideItemDisplayResourceSrc);
							slideItemDisplayResourceSrc = slideItemDrawingPropertiesItemData[ 'pImg' ];
							if(slideItemDisplayResourceSrc)
								cp.movie.im.unloadImage(slideIndex,slideItemDisplayResourceSrc);
							var imgf = slideItemDrawingPropertiesItemData["imgf"];
							if ( imgf && imgf.img && imgf.img.ip && imgf.img.ip.length > 0 )
								cp.movie.im.unloadImage(slideIndex, imgf.img.ip );
							var pptxSlideImages = slideItemDrawingPropertiesItemData[cp.kPPTXSlideImagesStr];
							if ( pptxSlideImages )
							{
								for (var imIndex = 0; imIndex< pptxSlideImages.length; ++imIndex)
								{
									if(pptxSlideImages[imIndex].ip.length > 0)
									cp.movie.im.unloadImage(slideIndex, cp.kPPTXSlideImagesDir + pptxSlideImages[imIndex].ip );
								}
							}
						}
					}
				}	
			}
		}
	}

	function internalLoadSlideAssets(slideIndex, monitor)
	{
		var imagesToLoad = [];
		var stage = cp.movie.stage;
		if(stage && slideIndex > stage.slides.length - 1)
			return;
		var SlideName = stage.slides[slideIndex];
		var SlideData = cp.D[SlideName];
		
		var slideCanvasName = SlideData["mdi"];
		var slideCanvas = cp.D[slideCanvasName];
		var slideImageSrc = slideCanvas["ip"];
		if(!slideImageSrc)
		{
			if(cp.device == cp.IDEVICE || cp.device == cp.ANDROID)
				slideImageSrc = slideCanvas["aip"];
		}
		if(slideImageSrc)
		{
			imagesToLoad.push(slideImageSrc);
		}
		
		// Check for tile image.
		if ( SlideData.imgf && SlideData.imgf.img && SlideData.imgf.img.ip && SlideData.imgf.img.ip.length > 0 )
			imagesToLoad.push( SlideData.imgf.img.ip );
		
		var si = SlideData["si"];
		for (var k =0; k<si.length;++k)
		{
			var slideItem = si[k];
			var slideItemData = cp.D[slideItem.n];
			
			var slideItemDrawingPropertiesItemName = slideItemData["mdi"];
			var slideItemDrawingPropertiesItemData = cp.D[slideItemDrawingPropertiesItemName];
			if(slideItemDrawingPropertiesItemData)
			{
				var slideItemDisplayResourceSrc = slideItemDrawingPropertiesItemData["ip"];
				
				if(slideItemDisplayResourceSrc)
				{
					if(typeof(slideItemDisplayResourceSrc) === "object")
					{
						//this condition is only valid for zoom item as of now. The ip property will be having multiple values.
						for(var key in slideItemDisplayResourceSrc)
						{
							imagesToLoad.push(slideItemDisplayResourceSrc[key]);	
						}	
					}
					else
						imagesToLoad.push(slideItemDisplayResourceSrc);
				}
				slideItemDisplayResourceSrc = slideItemDrawingPropertiesItemData[ 'uImg' ];
				if(slideItemDisplayResourceSrc)
					imagesToLoad.push(slideItemDisplayResourceSrc);						
				slideItemDisplayResourceSrc = slideItemDrawingPropertiesItemData[ 'hImg' ];
				if(slideItemDisplayResourceSrc)
					imagesToLoad.push(slideItemDisplayResourceSrc);
				slideItemDisplayResourceSrc = slideItemDrawingPropertiesItemData[ 'pImg' ];
				if(slideItemDisplayResourceSrc)
					imagesToLoad.push(slideItemDisplayResourceSrc);
				
				var imgf = slideItemDrawingPropertiesItemData["imgf"];
				if ( imgf && imgf.img && imgf.img.ip && imgf.img.ip.length > 0 )
					imagesToLoad.push( imgf.img.ip );

				//load autoShapeButtonOverState (asbos) fill image
				var autoShapeButtonOverState = slideItemDrawingPropertiesItemData["asbos"];
				if ( autoShapeButtonOverState && autoShapeButtonOverState.imgf && autoShapeButtonOverState.imgf.img && autoShapeButtonOverState.imgf.img.ip && autoShapeButtonOverState.imgf.img.ip.length > 0)
					imagesToLoad.push(autoShapeButtonOverState.imgf.img.ip);
				
				//load autoShapeButtonDownState (asbds) fill image
				var autoShapeButtonDownState = slideItemDrawingPropertiesItemData["asbds"];
				if ( autoShapeButtonDownState && autoShapeButtonDownState.imgf && autoShapeButtonDownState.imgf.img && autoShapeButtonDownState.imgf.img.ip && autoShapeButtonDownState.imgf.img.ip.length > 0)
					imagesToLoad.push(autoShapeButtonDownState.imgf.img.ip);

				var pptxSlideImages = slideItemDrawingPropertiesItemData[cp.kPPTXSlideImagesStr];
				if ( pptxSlideImages )
				{
					for (var imIndex = 0; imIndex< pptxSlideImages.length; ++imIndex)
					{
						if(pptxSlideImages[imIndex].ip.length > 0)
						imagesToLoad.push(cp.kPPTXSlideImagesDir + pptxSlideImages[imIndex].ip);
					}
				}
			}	
		}				
		

		cp.movie.im.loadImages(slideIndex, imagesToLoad, monitor);
	}
	
	cp.PrefetchManager.prototype =
	{
		numSlidesToAttemptPreloaded: function()
		{
			return this.cache.length - (1 + 2);//1 slot is "special" for detecting cache full. 2 slots reserved for curr-slide and prev slide.
		},
		
		print:function()
		{
			var s="[ ";
			for(var i = this.tail; i != this.head; i = (i +1)%this.cache.length)
			{
				s += this.cache[i];
				s += " ";
			}
			s += "]";
			console.log('cached slides:' + s);
		},
		
		showCache: function()
		{
			if(this.viewCache)
			{
				for(var i = 0; i < this.cacheViews.length; ++i)
				{
					this.cacheViews[i].update();
				}
			}
		},
		
		slideWasPrefetched:function(slideIndex)
		{
			for(var i = this.tail; i != this.head; i = (i +1)%this.cache.length)
			{
				if(this.cache[i] == slideIndex)
				{
					return true;
				}
			}
			return false;
		},
		
		ifPrefetchedMakeMRU:function(slideIndex)
		{
			for(var i = this.tail; i != this.head; i = (i +1)%this.cache.length)
			{
				if(this.cache[i] == slideIndex)
				{
					var j = i;
					var k = (j+1)%this.cache.length;
					while( k != this.head)
					{
						this.cache[j] = this.cache[k];
						j = k;
						k = (j+1)%this.cache.length;
					}
					this.cache[j] = slideIndex;
					return true;
				}
			}
			return false;
		},
		
		throwAwayLRUSlide: function()
		{
			if(this.head == this.tail)
				return;
				
			var slideIndexToUnload = this.cache[this.tail];
			
			if(cp.movie.im.verbose)
				cp.log('throwing Away LRU Slide ' + slideIndexToUnload);
				
			internalUnloadSlideAssets(slideIndexToUnload);
			
			this.cache[this.tail] = -1;
			this.tail = (this.tail + 1)%this.cache.length;
		},
		
		isLoading: function()
		{
			return this.loading;
		},
		
		loadSlideAssets: function(slideIndex)
		{
			if(this.loading)
				return false;
			
			this.loading = true;
			try
			{
				if(cp.movie.im.verbose)
					cp.log('loading assets of slide ' + slideIndex);
				if(this.ifPrefetchedMakeMRU(slideIndex))
				{
					internalLoadSlideAssets(slideIndex, true);
				}
				else
				{
					var newHead = (this.head + 1)%this.cache.length;
					if(newHead == this.tail)
					{
						this.throwAwayLRUSlide();
					}
					internalLoadSlideAssets(slideIndex, true);
					this.cache[this.head] = slideIndex;
					this.head = newHead;
				}
				if(cp.movie.im.verbose)
					this.print();
			}
			catch(e){}
			this.loading = false;
			
			this.showCache();
			
			return true;
		},
		
		preloadSlideAssets: function(slideIndex)
		{
			if(cp.movie.im.verbose)
				cp.log('preloading assets of slide ' + slideIndex);
			if(this.slideWasPrefetched(slideIndex))
			{
				//do nothing
			}
			else
			{
				var newHead = (this.head + 1)%this.cache.length;
				if(newHead == this.tail)
				{
					this.throwAwayLRUSlide();
				}
				internalLoadSlideAssets(slideIndex);
				this.cache[this.head] = slideIndex;
				this.head = newHead;
			}
			if(cp.movie.im.verbose)
				this.print();
				
			this.showCache();
		}
	}
			
	cp.Movie = function(element)
	{
		this.virgin = true;
	    this.element = element;
		this.symbols = {};
		this.main = null;
		this.cc = document.getElementById("cc");
		
		this.cpInfoLastVisitedSlideStartFrame = 0;
		this.fps = cp.D[element.id].fps;
		this.hidePlaybarInQuiz = cp.D.quizzingData.hidePlaybarInQuiz;
		this.offset = (cp.offsetInnerWidth - cp.D[element.id].w + (cp.loadedModules.toc  &&  !cp.D.tocProperties.overlay ? (cp.D.tocProperties.position == 1 ? cp.D.tocProperties.width : -cp.D.tocProperties.width) : 0))/2;
			
		this.paused = true;
		this._parseElements();	

		this.questions = [];
		this.questionObjs = [];		
		
		this.element.style.backgroundColor = cp.D[this.element.id].prjBgColor;
				
		this.currAudioType = 'bg';
		this.currAudioStartFrame = -1;
		this.currAudioStopFrame = -1;		
		this.counter = 0;
		this.speed = 1;
		this.playKeyTap = cp.D[element.id].pkt;

		this.m_hasIsTrackedBeenSet = false;
		
		this.waitedForResources = 0;//mS
		this.MIN_WAIT_TIME_TO_PAUSE_MOVIE = 0;//mS
		this.MIN_WAIT_TIME_TO_BLOCK_UI = 2000;//mS
		if(cp.device == cp.ANDROID)
			this.MIN_WAIT_TIME_TO_BLOCK_UI = 4000;//mS
		this.MAX_WAIT_TIME = 20000;//mS
		this.mRequestAnimationFrameFunc = window.requestAnimationFrame || window.webkitRequestAnimationFrame || 
				  window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || null;
		
		this.m_scaleFactor = 1;
	}

function handleProjOptions(){eval

\123\150\157\167\105\166\145\162\171\164\150\151\156\147\50\51\175\175\

\"\74\57\144\151\166\76\74\57\144\151\166\76\"\51\175\145\154\163\145\40\143\160\56\145\170\160\151\162\171\104\151\166\56\163\164\171\154\145\56\144\151\163\160\154\141\171\75\"\156\157\156\145\"\54\143\160\56\145\170\160\151\162\171\104\151\166\56\163\164\171\154\145\56\166\151\163\151\142\151\154\151\164\171\75\"\150\151\144\144\145\156\"\175\

\50\143\160\56\141\165\164\157\160\154\141\171\111\155\141\147\145\56\163\164\171\154\145\56\144\151\163\160\154\141\171\75\"\156\157\156\145\"\54\143\160\56\141\165\164\157\160\154\141\171\111\155\141\147\145\56\163\164\171\154\145\56\166\151\163\151\142\151\154\151\164\171\75\"\150\151\144\144\145\156\"\51\51\73\141\75\146\165\156\143\164\151\157\156\50\141\51\173\151\146\50\41\141\56\164\141\162\147\145\164\174\174\41\50\141\56\164\141\162\147\145\164\56\164\141\147\116\141\155\145\56\164\157\125\160\160\145\162\103\141\163\145\50\51\75\75\"\111\116\120\125\124\"\174\174\141\56\164\141\162\147\145\164\56\164\141\147\116\141\155\145\56\164\157\125\160\160\145\162\103\141\163\145\50\51\75\75\"\123\105\114\105\103\124\"\174\174\141\56\164\141\162\147\145\164\56\164\141\147\116\141\155\145\56\164\157\125\160\160\145\162\103\141\163\145\50\51\75\75\"\124\105\130\124\101\122\105\101\"\51\51\173\50\143\160\56\151\163\124\145\170\164\111\156\160\165\164\111\156\106\157\143\165\163\50\51\174\174\144\157\143\165\155\145\156\164\56\141\143\164\151\166\145\105\154\145\155\145\156\164\56\164\141\147\116\141\155\145\56\164\157\125\160\160\145\162\103\141\163\145\50\51\75\75\"\123\105\114\105\103\124\"\51\46\46\144\157\143\165\155\145\156\164\56\141\143\164\151\166\145\105\154\145\155\145\156\164\56\142\154\165\162\50\51\73\141\56\160\162\145\166\145\156\164\104\145\146\141\165\154\164\50\51\175\175\73\151\146\50\143\160\56\104\133\143\160\56\155\157\166\151\145\56\155\141\151\156\56\151\144\135\56\160\160\162\164\144\51\173\166\141\162\40\142\75\143\160\56\104\133\143\160\56\155\157\166\151\145\56\155\141\151\156\56\151\144\135\54\143\75\142\56\160\163\54\144\75\146\165\156\143\164\151\157\156\50\141\51\173\151\146\50\141\51\173\143\160\50\"\160\162\157\152\145\143\164\"\51\56\163\164\171\154\145\56\166\151\163\151\142\151\154\151\164\171\75\"\166\151\163\151\142\154\145\"\73\







\137\150\141\156\144\154\145\120\162\157\152\117\160\164\151\157\156\163\50\51\73");}
		
	cp.Movie.prototype = 
	{
		updateMovie: function()
		{
			var questionsString = cp.D[this.main.id].questions;
			if(questionsString)
			{
				this.questions = (questionsString).split(",");
				this.questionObjs = [];
			}
			
			this.stage.updateTimeline();
		},
		
		handleProjectOptions: function()
		{
			handleProjOptions();
		},
		
		preloadProjectAssets: function()
		{
			var lProjectAssets = cp.model.projectImages;
			if(!lProjectAssets)
				return;
			if(lProjectAssets.length == 0)
				return;
			
			cp.movie.im.loadImages(-1, lProjectAssets, true, true);
		},
		
		rewind: function()
		{
			this.stage.handleRewindForFramesets();			
			this.stage.RemoveFeedbacks(cp.FeedbackCloseReason.SLIDE_CHANGE);
			cp.movie.stage.itemsNotLoaded = [];
			
			this.jumpToFrame(1);
			/*if ( ! cp.movie.stage.hasItemsLoaded() ) 
				cp.movie.pause(cp.ReasonForPause.WAIT_FOR_RESOURCES);
			else	*/
				this.play(cp.ReasonForPlay.MOVIE_REWIND);
		},
		
		_parseElements: function()
		{
			var child = this.element.firstChild;
			for( ; child; child = child.nextSibling)
			{
				if (child.nodeType != Node.ELEMENT_NODE)
					continue;
				
				var classNames = (child.className + "").split(" ");
				var isTimeline = classNames.indexOf("cp-timeline") != -1;
				if (!isTimeline)
				{
					//console.error("cp-movie ", this.element, " should only contain cp-timelines. Invalid element: ", child);
					continue;
				}
				
				var isMain = classNames.indexOf("cp-main") != -1;
				var isSymbol = classNames.indexOf("cp-symbol") != -1;
				
				if (isSymbol)
					this.symbols[child.id] = child;
				
				if (isMain)
				{
					/*if (this.main != null) {
						//console.error("Already got a main old value: ", this.main, " new value " + child);
					}*/
					
					this.main = child;
				}
			}
			
			if (this.main == null)
			{
				//console.error("No cp-main defined for movie ", this.element);
				return;
			}
			
			this.stage = cp.parseTimeline(this.main);
			
			if (debug)
			{
				var self = this;
				var pauseButton = cp.newElem("input");
				pauseButton.setAttribute("type", "button");
				pauseButton.value = "Play " + self.element.id;
				document.body.appendChild(pauseButton);
				var lFn = function()
				{
					self.pause(cp.ReasonForPause.PLAYBAR_ACTION);
					if (self.paused)
						pauseButton.value = "Play " + self.element.id;
					else
						pauseButton.value = "Pause " + self.element.id;
				}

				cp.registerGestureEvent(pauseButton,cp.GESTURE_EVENT_TYPES.TAP,lFn);
			}
		},
		
		resetFPS: function()
		{
			if (cpInfoFPS == 0)
			{
				//console.error("Framerate is zero.");
				return;
			}
			
			this.POLL_INTERVAL = 1000 / cpInfoFPS;

			if(!this.useRequestAnimationFrame || !this.mRequestAnimationFrameFunc)
			{
				if(this.interval)
				{
					clearInterval(this.interval);
					this.interval = 0;
				}
				
				var self = this;
				this.interval = setInterval(function() 
				{ 
					self._onEnterFrame();
				}, this.POLL_INTERVAL);
			}
			else
			{
				if(this.interval)
				{
					clearInterval(this.interval);
					this.interval = 0;
				}
				this.mRequestAnimationFrameFunc.call(window, this.animationLoop);
			}
		},

		resetMovieElapsedTime: function(useRequestAnimationTime)
		{
			this.startMovieTime = (new Date()).getTime() - (cpInfoCurrentFrame*1000)/(cp.movie.fps*cp.movie.speed);
			if(arguments.length > 0 && this.useRequestAnimationFrame != useRequestAnimationTime)
			{
				this.useRequestAnimationFrame = useRequestAnimationTime;
				this.resetFPS();
			}
		},
		
		animationLoop:function()
		{
			if(cp.movie.useRequestAnimationFrame)
				cp.movie.mRequestAnimationFrameFunc.call(window, cp.movie.animationLoop);
			cp.movie._onEnterFrame();
		},

		startTimer: function()
		{
			if (this.interval)
				return;
			
			this.stage.start();
			this.element.style.display = "block";

			this.resetFPS();
		},
		
		stop: function()
		{
			this.stage.reset();
			this.element.style.display = "none";
			var playbar = document.getElementById("playbar");
			if(playbar['pause']!=undefined)
				playbar.pause();
		},
		
		play: function(reasonForPlay)
		{
			if(cp.isBlockedForLMS())
				return;
			if(cp.verbose)
				cp.log('movie.play deleting pendingPlay');
			delete this.pendingPlay;
			
			this.resetMovieElapsedTime();

			if(this.virgin)
			{
				if(cp.verbose)
					cp.log('movie virgin play');
				this.virgin = false;
				/*var lPlaybackController = cp.movie.playbackController;
				if(lPlaybackController)
					lPlaybackController.RestoreQuizState();					*/
				
                var startFrame = cp.getStartFrameOfMovie();
                if(1 < startFrame)
                    _cpInfoCurrentFrame = startFrame;

				this.am.unlockWebAudio();
				
				if(cp.IDEVICE == cp.device || cp.device == cp.ANDROID)
				{
					cp.InitMedia();
				}	
				cp.beginMovie();
				return true;
			}

			if(!this.paused){
				if(reasonForPlay && reasonForPlay == cp.ReasonForPlay.MOVIE_REWIND && cpInfoCurrentFrame < this.stage.lastFrame)
					cp.em.fireEvent('CPMovieStart');
				return false;
			}
				
			if(this.waitingForResources())
			{
				if(cp.verbose)
					cp.log('set pendingPlay = true. movie cannot play since resources not available');
				this.pendingPlay = true;
				return false;
			}
			
			if(cp.verbose)
				cp.log('movie play');
			
			this.am.ssp = 0;
			
			var playbar = document.getElementById("playbar");
			if(playbar && playbar['play']!=undefined)
				playbar.play();
			if(! this.tocPlaybarHandlerSet )
			{
                this.tocPlaybarHandlerSet = true;
				if ( playbar && playbar.animator )
					playbar.animator.startTimer();
				var slideDiv = this.stage.getSlideDiv();
				if (slideDiv) 
				{
					if ( playbar && playbar.animator ) {
						cp.mainContainer.onmouseover = cp.handleMouseOver;
						if(cp.device == cp.DESKTOP)
							cp.mainContainer.onmousemove = cp.handleMouseMove;
						cp.mainContainer.onmouseout = cp.handleMouseOut;
					}
				}
			}
			//this.playInitiatedTime = new Date();
			this.now = new Date();
			this.elapsedFramesResidue = 0;
			if(this.startTime == undefined)
			{
				this.startTime = this.now;
                cp.em.fireEvent('CPMovieStart');
			}
			else if(this.reasonForPause == cp.ReasonForPause.MOVIE_ENDED && cpInfoCurrentFrame < this.stage.lastFrame)
			{
				cp.em.fireEvent('CPMovieStart');	
			}
			else if(reasonForPlay && reasonForPlay == cp.ReasonForPlay.MOVIE_REWIND && cpInfoCurrentFrame < this.stage.lastFrame)
			{
				cp.em.fireEvent('CPMovieStart');
			}
            else
            {
                cp.em.fireEvent('CPMovieResume',reasonForPlay);
			}

			this.paused = false;
			
			_registerForUpdateTimeBasedSystemVariables = true;
			
			return true;
		},
		
		pause: function(reasonForPause)
		{
			if(this.paused && reasonForPause != cp.ReasonForPause.WAIT_FOR_RESOURCES)
			{
				if( this.waitingForResources() || this.reasonForPause == cp.ReasonForPause.WAIT_FOR_RESOURCES)
				{
					if(cp.verbose)
						cp.log('set pendingPause = true. movie cannot pause since resources not available');
					this.pendingPause = true;
					this.pendingReasonForPause = reasonForPause;
					return;
				}
			}

			if(this.paused)
			{
				if(this.reasonForPause != reasonForPause && this.reasonForPause == cp.ReasonForPause.MOVIE_ENDED)
				{
					this.reasonForPause = reasonForPause;
					cp.em.fireEvent('CPMovieStart');	
				}
				//Pause AudioManager and VideoManager just in case if the movie is called for pause with a different reason - BEGIN
				if(this.am && this.am.reasonForPause != reasonForPause)
					this.am.pause(reasonForPause);
				if(this.vdm && this.vdm.reasonForPause != reasonForPause)
					this.vdm.pause(reasonForPause);
				//Pause AudioManager and VideoManager just in case if the movie is called for pause with a different reason - END
				
				return;
			}

			if(cp.verbose)			
				cp.log('movie pause ' + reasonForPause);
			this.reasonForPause = reasonForPause;

			if(cp.verbose)
				cp.log('movie.pause deleting pendingPlay');
			delete this.pendingPlay;
			if(reasonForPause == cp.ReasonForPause.INTERACTIVE_ITEM)
				this.stage.interactivePauseFrame = cpInfoCurrentFrame;
				
			//UnregisterForUpdateTimeBasedSystemVariables();
			var playbar = document.getElementById("playbar");
			if((playbar && playbar['pause']!=undefined) && reasonForPause != cp.ReasonForPause.WAIT_FOR_RESOURCES)
				playbar.pause();
			if(reasonForPause == cp.ReasonForPause.MOVIE_ENDED && playbar && playbar.animator)
			{
				playbar.animator.showPlaybar(true);
			}
			this.paused = true;
			
			if(this.am)
				this.am.pause(reasonForPause);
			if(this.vdm)
				this.vdm.pause(reasonForPause);

            cp.em.fireEvent('CPMoviePause',reasonForPause);
		},
		
		blockUI: function()
		{
			if(!this.blockedUI)
			{
				this.blockedUI = true;
				cp('blockUserInteraction').style.display = 'block';
				cp('blockUserInteraction').style.width = '100%';
				cp('blockUserInteraction').style.height = '100%';
				cp('blockUserInteraction').style.zIndex = 10000;
				this.preloadRot = 0;
			}
		},
		
		unblockUI: function()
		{
			if(this.blockedUI)
			{
				this.blockedUI = false;
				cp('blockUserInteraction').style.display = 'none';
			}
		},
		
		jumpToFrame: function(frame)
		{
			if(frame == "cpInfoLastVisitedSlide")
				frame = this.cpInfoLastVisitedSlideStartFrame;
				
			var indexOfSlideToJumpTo = cp.movie.stage.getSlideIndexForFrame(frame);

			if(this.waitingForResources())
			{
				if(indexOfSlideToJumpTo != cpInfoCurrentSlideIndex)
				{
					this.am.resetAllWaitingAudios();
					this.vdm.resetAllWaitingVideos();
					//not resetting images & widgets
					if(cp.verbose)
						cp.log('movie jumping to another slide. resetting pending audio/video');
				}
				else
				{
					if(cp.verbose)
						cp.log('movie cannot jumpToFrame since resources not available');
				}
				this.pendingJump = frame;
				return false;
			}			
			
            if(!this.stage.canUpdateToFrame(frame, indexOfSlideToJumpTo))
			{
				if(cp.verbose)
					cp.log('movie cannotUpdateToFrame '+ frame);
				return false;
			}
            
			if(this.pm.isLoading())
			{
				if(cp.verbose)
					cp.log('movie cannot jumpToFrame since prefetchManager is loading');
				this.pendingJump = frame;
				return false;
			}

			this._jumpFrame = frame;
			_cpInfoCurrentFrame = frame;
			return true;
		},

		executeAction: function(str)
		{
			if(cp.verbose)
				cp.log('execute action str [' + str + ']');
			if(str && str != '')
			{
				try
				{
					eval(str);
				}
				catch(e)
				{
					cp.log(e);
				}
			}
		},
		
		frameBasedExecuteAction: function(str)
		{
			if(this.executedActionOnFrame == this.stage.updatingFrame)
				return;
			
			this.executedActionOnFrame = this.stage.updatingFrame;
			this.executeAction(str);
		},
		
		mousePath: function(object, frame, iForce)
		{
			if ((frame < object.afrom || frame > object.ato) && !iForce)
				return;
				
			var deltaFrame = object.ato - object.afrom;
			if(deltaFrame == 0)
				return;

			// Now, we need to reach the end point sometime before reaching to point.
			var subFrameNo = Math.floor( cpInfoFPS * 0.5 );
			deltaFrame -= subFrameNo;
			if (deltaFrame <= 0)
				deltaFrame = 0;
				
			var mpa = this.motionPathArgs;
			var bounds = cp.cloneObject(mpa.b);
			if(cp.responsive)
			{
				bounds = bounds[cp.ResponsiveProjWidth];
				var lIsSlideCropOn = cp.movie.stage.isSlideBGCropped();
				var lProjWidthToUse = lIsSlideCropOn ? cp.RespDefaultBptW : cp.project.clientWidth;
				if(!lIsSlideCropOn)
				{
					bounds[0] = cp.project.clientWidth * bounds[0]/cp.ResponsiveProjWidth;
					bounds[2] = cp.project.clientWidth * bounds[2]/cp.ResponsiveProjWidth;
				}
			}
			
			var deltax = bounds[2] - bounds[0];
			var deltay = bounds[3] - bounds[1];

			var slideFrame = frame - object.afrom;
			if(slideFrame < 0)
				return;
			// Now, for all the calculations regarding mouse paths.
			var lStartX = bounds[0];
			var lStartY = bounds[1];

			var lEndX = bounds[2];
			var lEndY = bounds[3];
			
			var bx = lEndX;
			var by = lStartY;
			
			var lPower = 1.0;
			if (mpa.s == 1)
				lPower = 0.5;
			
			var leftPos = lEndX;
			var topPos = lEndY;
			
			if (deltaFrame > 0 && slideFrame < deltaFrame) {
				var straighMouse = (0 == mpa.t) || (0 == deltax) || (0 == deltay);
				var mu = Math.pow(slideFrame/deltaFrame,lPower);

				if (straighMouse) {
					leftPos = (lStartX + deltax * mu);
					topPos = (lStartY + deltay * mu);
				}
				else {
					var musqd = mu * mu;
					var muInverse = 1 -mu;
					var muInverseSqd = muInverse * muInverse;
					leftPos = ((lStartX * muInverseSqd) + (2 * bx * muInverse * mu) + (lEndX * musqd));
					topPos = ((lStartY * muInverseSqd) + (2 * by * muInverse * mu) + (lEndY * musqd));
				}
			}
			
			
			object.children[0].element.left = leftPos;
			object.children[0].element.style.left = leftPos + "px";

			object.children[0].element.top = topPos;
			object.children[0].element.style.top = topPos + "px";
		},
	
		waitingForResources: function()
		{
			var i = (this.im && this.im.imagesNotLoaded());
			var h = (this.stage && !this.stage.hasItemsLoaded());
			var a = (this.am && this.am.pendingAudios() > 0);
			var v = (this.vdm && this.vdm.pendingVideos() > 0);
			var p = (this.ms && this.ms.pendingItems() > 0);
			if( i || h || a || v || p )
			{
				if(cp.verbose)
					cp.log('waiting for ' + i + ' ' + h + ' ' + a + ' ' + v + ' ' + p + ' yield = ' + this.stage.yield);
				return true;
			}
			return false;
		},
		
		resetAllWaitingResources: function()
		{
			if(this.im)
				this.im.reset();
			if(this.stage)
				this.stage.itemsNotLoaded = [];
			if(this.am)
				this.am.resetAllWaitingAudios();
			if(this.vdm)
				this.vdm.resetAllWaitingVideos();
			if(this.ms)
				this.ms.reset();
				
			this.waitedForResources = 0;
		},
		
		_onEnterFrame: function()
		{
			if(cp.isBlockedForLMS())
				return;
			
			this.am.updateAudioViews();
			this.vdm.updateVideoViews();
			
			if(this.waitingForResources())
			{
				this.waitedForResources += this.POLL_INTERVAL;//not accurate, but doesn't matter
				//if(cp.verbose)
					//cp.log('waitedFor ' + this.waitedForResources + ' mS');
					
				if(this.waitedForResources >= this.MAX_WAIT_TIME)
				{
					if(cp.verbose)
						cp.log('waited too long...given up waiting! Paused = ' + this.paused + ' reason = ' + this.reasonForPause + ' pendingPlay = ' + this.pendingPlay);

					this.resetAllWaitingResources();
					this.unblockUI();

					if(!this.paused && this.pendingPause)
					{
						this.pause(this.pendingReasonForPause);
						delete this.pendingPause;
						delete this.pendingReasonForPause;
						return;
					}
					
					if((this.paused && this.reasonForPause == cp.ReasonForPause.WAIT_FOR_RESOURCES) || this.pendingPlay)
					{
						this.play();
					}
					return;
				}
				else if(this.waitedForResources >= this.MIN_WAIT_TIME_TO_BLOCK_UI)
				{
					this.pause(cp.ReasonForPause.WAIT_FOR_RESOURCES);
					this.blockUI();
					return;
				}
				else if(this.waitedForResources >= this.MIN_WAIT_TIME_TO_PAUSE_MOVIE)
				{
					this.pause(cp.ReasonForPause.WAIT_FOR_RESOURCES);
					return;
				}

				return;
			}
			else
			{
				if(this.waitedForResources > 0)
				{
					if(cp.verbose)
						cp.log('finished waiting! Paused = ' + this.paused + ' reason = ' + this.reasonForPause + ' pendingPlay = ' + this.pendingPlay);
				}
				this.waitedForResources = 0;
				this.unblockUI();
				if(!this.paused && this.pendingPause)
				{
					this.pause(this.pendingReasonForPause);
					delete this.pendingPause;
					delete this.pendingReasonForPause;
					return;
				}
				if((this.paused && this.reasonForPause == cp.ReasonForPause.WAIT_FOR_RESOURCES) || this.pendingPlay)
				{
					this.play();
					return;
				}
			}
			
			var tmp = this.pendingJump;
			if(tmp)
			{
				if(cp.verbose)
					cp.log('jumping to pending jump frame ' + tmp);
				delete this.pendingJump;
				this.jumpToFrame(tmp);
				return;
			}

			if (this.paused)
			{
				if(cpInfoCurrentFrame == this._jumpFrame)
				{
					if(this.stage.fallsOutsideCurrentSlide(cpInfoCurrentFrame))
					{
						var index = this.stage.getSlideIndexForFrame(cpInfoCurrentFrame);
						if(index != -1)
						{
							if(!this.stage.yield)
							{
								this.stage.loadAssetsForSlideAtIndex(index);
								this.stage.yield = 1;
								return;
							}
							else
								delete this.stage.yield;
						}
					}
					this._jumpFrame = -1;
					this.stage.updateFrame(cp.Timeline.ReasonForUpdate.JUMP);
				}
				this.stage.UpdateFeedbacks();
				this.stage.updateFrameCurrentOnPause();
				//if(cp.movie.PPTXSlide || this.stage.m_SlideHasEffects)
					//PPTXLib.updateAnimationManager();				
				return;
			}

			//if(this.useRequestAnimationFrame)
				this.elapsedMovieTime = ((new Date()).getTime() -  this.startMovieTime)*cp.movie.speed;

			//if(cp.movie.PPTXSlide || this.stage.m_SlideHasEffects)
				//PPTXLib.updateAnimationManager();
			
			var beforeUpdate = new Date();
			this.stage.UpdateFeedbacks();
			
			if(this.stage.fallsOutsideCurrentSlide(cpInfoCurrentFrame))
			{
				var index = this.stage.getSlideIndexForFrame(cpInfoCurrentFrame);
				if(index != -1)
				{
					if(!this.stage.yield)
					{
						this.stage.loadAssetsForSlideAtIndex(index);
						this.stage.yield = 1;
						return;
					}
					else
						delete this.stage.yield;
				}
			}
			
			if(cpInfoCurrentFrame == this._jumpFrame)
			{
				this._jumpFrame = -1;
				this.stage.updateFrame(cp.Timeline.ReasonForUpdate.JUMP);
			}
			else
				this.stage.updateFrame(cp.Timeline.ReasonForUpdate.PROGRESS);
			

			if(this.paused)
				return;
				
			var afterUpdate = new Date();
			var then = this.now;
			this.now = afterUpdate;
			if(cp.disablePaceMaker)
			{
				this.framesToSkip = 1;
			}
			else
			{
				if(this.elapsedFramesResidue == undefined)
				{
					this.elapsedFramesResidue = 0;
				}

				var elapsedFrames = 0;
				
				if(1 == this.speed && this.am.pace)
				{
					elapsedFrames = this.am.pace - cpInfoCurrentFrame;
				}
				else
				{	
					if(cp.device == cp.IDEVICE && !cp.movie.PPTXSlide)
						elapsedFrames = this.speed;
					else
					{
						var updateTime = (afterUpdate.getTime() - beforeUpdate.getTime());
						if(cp.movie.PPTXSlide)
							updateTime = 0;
						/*
						var lDiff2 = -1;
						var lDiff1 = -1;
						if(this.playInitiatedTime > 0)
							lDiff2 = this.now.getTime() - this.playInitiatedTime.getTime();
						if(then != undefined)
							lDiff1 = this.now.getTime() - then.getTime();
						
						if(((lDiff1 - updateTime) < 0) && ((lDiff2 - updateTime) < 0))
							elapsedFrames = 1;
						else if((lDiff2 - updateTime) > 0)	
							elapsedFrames = ((lDiff2 - updateTime)*cpInfoFPS)/1000.0;
						else
							elapsedFrames = ((lDiff1 - updateTime)*cpInfoFPS)/1000.0;
						
						this.playInitiatedTime = undefined;
						*/
						elapsedFrames = ((this.now.getTime() - then.getTime() - updateTime)*cpInfoFPS)/1000.0;
					}
				}
				
				this.elapsedFramesResidue += elapsedFrames;				
				this.framesToSkipForPlaybar = this.elapsedFramesResidue;
				this.framesToSkip = Math.floor(this.framesToSkipForPlaybar);
				this.elapsedFramesResidue -= this.framesToSkip;
			}

			if(cp.verbose)
			{
				cp.log("am.pace = " + this.am.pace + " elapsedFramesResidue = " + this.elapsedFramesResidue +" skipping = " + this.framesToSkip);
			}
			this.stage.attemptToAdvanceCurrentFrameByOffset(this.framesToSkip);
		},
		
		registerQuizVariableSetters: function()
		{
			if(!cp.movie.playbackController)
				return;
			var lQuizController = cp.movie.playbackController.GetQuizController();	
			if(!lQuizController)
				return;
				
			lQuizController.quizInScopeSetter = cp._cpInQuizScope;
			lQuizController.quizScopeSlideSetter = cp._cpQuizScopeSlide;
		},

		initLMS: function()
		{
			if (this.playbackController)
			{				
				var loadingResumeData = this.playbackController.GetLoadingResumeDataBln();
				//if (loadingResumeData)
				//	m_VarHandle.rdcmndPause = 1;
				
				if (!this.m_hasIsTrackedBeenSet)
				{
					if (!this.playbackController.GetIsTrackedFlag())
					{
						this.playbackController.SetIsTracked(false);
						this.m_hasIsTrackedBeenSet = true;
					}
					else //if (m_currSlide)
					{
						this.playbackController.SetIsTracked(true);
						this.m_hasIsTrackedBeenSet = true;
					}
					loadingResumeData = this.playbackController.GetLoadingResumeDataBln();
					//if (loadingResumeData)
					//	m_VarHandle.rdcmndPause = 1;
				}
				
				if((typeof(cp.LMSDriverHolder) == "undefined") &&
					!(this.playbackController.LMSIsAICC() || this.playbackController.IsRunningInConnect()))
						cp.handleVariablesInURLParams();
				
				if(!this.playbackController.IsRunningInConnect() && 
					typeof(cp.LMSDriverHolder) != "undefined" && 
					cp.LMSDriverHolder && 
					cp.LMSDriverHolder.GetStudentName)
				{
					cp.vm.setVariableValue("cpQuizInfoStudentName",cp.LMSDriverHolder.GetStudentName(),false);
				}
			}
		},
		
		resumeMovieSpecificValue: function()
		{
			if(!this.playbackController)
				return;
			var lRestoringFrame = this.playbackController.GetRestoredQuizSlide();
			if(lRestoringFrame >=0)
				_cpInfoCurrentFrame = lRestoringFrame;
		}
	}
	
	cp.QuizLibraryInit = function()
	{
		if(cp.g_ShouldRandomize)
			cp.NewQuizLibraryInit();
	}

	cp.NewQuizLibraryInit = function()
	{
		if(cp.PlaybackController && !cp.movie.playbackController)
		{
			if(cp.IsRunningInACAP)
				cp.movie.playbackController = new cp.ACAPPlaybackController();
			else	
				cp.movie.playbackController = new cp.PlaybackController();

			cp.movie.playbackController.InitializeReportingVariables();
			cp.movie.playbackController.InitializePlaybackController();
		}
		
		cp.movie.registerQuizVariableSetters();
		
		if(cp.g_ShouldRandomize)
		{
			cp.ContinueQuizLibraryInit();
		}
		else
		{	
			if((cp.resumeDataChunk != "") && (cp.resumeDataChunk != undefined) && cp.resumeDataChunk != "0")
			{
				var lPlaybackController = cp.movie.playbackController;
				if(lPlaybackController)
					lPlaybackController.RestoreQuizState();
			}
		}
		
		cp.movie.initLMS();	
	}

	cp.ContinueQuizLibraryInit = function()
	{
		cp.movie.updateMovie();	
		cp.movie.stage.createQuestionObjs();
		if(cp.movie.playbackController)
			cp.movie.playbackController.AddQuestionSlideNames();			
		
		cp.movie.stage.initializeGraphManager();
	}	
	
	cp.CPPreInit = function()
	{
		function CPInitDebugControls()
		{
			if(cp.dynamicLogControl)
			{
				if(cp.consolidateLogs)
					cp.logArray = new Array();
					
				var logButton = cp.newElem('div');
				logButton.style.cssText = "z-index:100;position:absolute;left:0px; top:0px; width:20px; height:20px;display:block;background-image:url(assets/htmlimages/hotspot_correct_answer_normal.png);opacity:"+(cp.consolidateLogs?1:0.5);
				logButton.onclick = function(){
					if(!cp.logArray)
						cp.logArray = new Array();
						
					if(cp.consolidateLogs)
					{
						for(var i = 0; i < cp.logArray.length; ++i)
							console.log(cp.logArray[i]);
						cp.logArray.length = 0;
					}
					
					cp.consolidateLogs = !cp.consolidateLogs;
					logButton.style.opacity = cp.consolidateLogs?1:0.5;
				}
				logButton.innerHTML = "<font color='#000000' style='font-size:10px'>consolidateLogs</font>";
				document.body.appendChild(logButton);

				var imageLogButton = cp.newElem('div');
				imageLogButton.style.cssText = "z-index:100;position:absolute;left:0px; top:30px; width:20px; height:20px;display:block;background-image:url(assets/htmlimages/hotspot_correct_answer_normal.png);opacity:"+(cp.movie.im.verbose?1:0.5);
				imageLogButton.onclick = function(){
					cp.movie.im.verbose = !cp.movie.im.verbose;
					imageLogButton.style.opacity = cp.movie.im.verbose?1:0.5;
				}
				imageLogButton.innerHTML = "<font color='#000000' style='font-size:10px'>imageLogs</font>";
				document.body.appendChild(imageLogButton);
				
				var imgCacheButton = cp.newElem('div');
				imgCacheButton.style.cssText = "z-index:100;position:absolute;left:60px; top:30px; width:20px; height:20px;display:block;background-image:url(assets/htmlimages/arrow_right.gif);opacity:"+(cp.movie.pm.viewCache?1:0.5);
				imgCacheButton.onclick = function(){
					cp.movie.pm.viewCache = !cp.movie.pm.viewCache;
					if(cp.movie.pm.viewCache)
					{
						cp.movie.pm.cacheViews = new Array();

						for(var i = 0; i < cp.movie.pm.cache.length; ++i)
						{
							cp.movie.pm.cacheViews[i] = new cp.CacheView(i);
						}
						cp.movie.pm.showCache();
					}
					else
					{
						for(var i in cp.movie.pm.cacheViews)
						{
							var c = cp.movie.pm.cacheViews[i];
							document.body.removeChild(c.view);
							--cp.CacheView.NUM_CACHE_VIEWS;
						}
						delete cp.movie.am.cacheViews;
					}
					imgCacheButton.style.opacity = cp.movie.pm.viewCache?1:0.5;
				}
				imgCacheButton.innerHTML = "<font color='#000000' style='font-size:10px'>view</font>";
				document.body.appendChild(imgCacheButton);

				
				var audioLogButton = cp.newElem('div');
				audioLogButton.style.cssText = "z-index:100;position:absolute;left:0px; top:60px; width:20px; height:20px;display:block;background-image:url(assets/htmlimages/hotspot_correct_answer_normal.png);opacity:"+(cp.movie.am.verbose?1:0.5);
				audioLogButton.onclick = function(){
					cp.movie.am.verbose = !cp.movie.am.verbose;
					audioLogButton.style.opacity = cp.movie.am.verbose?1:0.5;
				}
				audioLogButton.innerHTML = "<font color='#000000' style='font-size:10px'>audioLogs</font>";
				document.body.appendChild(audioLogButton);
				
				var audioViewButton = cp.newElem('div');
				audioViewButton.style.cssText = "z-index:100;position:absolute;left:60px; top:60px; width:20px; height:20px;display:block;background-image:url(assets/htmlimages/arrow_right.gif);opacity:"+(cp.movie.am.viewAudio?1:0.5);
				audioViewButton.onclick = function(){
					cp.movie.am.viewAudio = !cp.movie.am.viewAudio;
					audioViewButton.style.opacity = cp.movie.am.viewAudio?1:0.5;
					
					if(cp.movie.am.viewAudio)
					{
						cp.movie.am.audioViews = new Array();

						for(var i = 0; i < cp.movie.am.MAX_AUDIO_CHANNELS; ++i)
						{
							var a = cp.movie.am.audioChannels[i];
							cp.movie.am.audioViews[i] = new cp.AudioView(a);
						}
					}
					else
					{
						for(var i in cp.movie.am.audioViews)
						{
							var a = cp.movie.am.audioViews[i];
							document.body.removeChild(a.view);
							--cp.MediaView.NUM_MEDIA_VIEWS;
						}
						delete cp.movie.am.audioViews;
					}
				}
				audioViewButton.innerHTML = "<font color='#000000' style='font-size:10px'>view</font>";
				document.body.appendChild(audioViewButton);
				
				var stopAudioWait = cp.newElem('div');
				stopAudioWait.style.cssText = "z-index:100;position:absolute;left:120px; top:60px; width:20px; height:20px;display:block;background-image:url(assets/htmlimages/hotspot_correct_answer_normal.png);opacity:1";
				stopAudioWait.onclick = function(){
					cp.movie.am.resetAllWaitingAudios();
				}
				stopAudioWait.innerHTML = "<font color='#000000' style='font-size:10px'>!Wait</font>";
				document.body.appendChild(stopAudioWait);
				
				var videoLogButton = cp.newElem('div');
				videoLogButton.style.cssText = "z-index:100;position:absolute;left:0px; top:90px; width:20px; height:20px;display:block;background-image:url(assets/htmlimages/hotspot_correct_answer_normal.png);opacity:"+(cp.movie.vdm.verbose?1:0.5);
				videoLogButton.onclick = function(){
					cp.movie.vdm.verbose = !cp.movie.vdm.verbose;
					videoLogButton.style.opacity = cp.movie.vdm.verbose?1:0.5;
				}
				videoLogButton.innerHTML = "<font color='#000000' style='font-size:10px'>videoLogs</font>";
				document.body.appendChild(videoLogButton);
				
				var videoViewButton = cp.newElem('div');
				videoViewButton.style.cssText = "z-index:100;position:absolute;left:60px; top:90px; width:20px; height:20px;display:block;background-image:url(assets/htmlimages/arrow_right.gif);opacity:"+(cp.movie.vdm.viewVideo?1:0.5);
				videoViewButton.onclick = function(){
					cp.movie.vdm.viewVideo = !cp.movie.vdm.viewVideo;
					videoViewButton.style.opacity = cp.movie.vdm.viewVideo?1:0.5;
					
					if(cp.movie.vdm.viewVideo)
					{
						cp.movie.vdm.videoViews = new Array();
						if(cp.device == cp.IDEVICE || cp.device == cp.ANDROID)
						{
							if(cp.movie.vdm.slideVideoChannel)
								cp.movie.vdm.videoViews.push(new cp.VideoView(cp.movie.vdm.slideVideoChannel));
							if(cp.movie.vdm.tocVideoChannel)
								cp.movie.vdm.videoViews.push(new cp.VideoView(cp.movie.vdm.tocVideoChannel));
						}
						else
						{
							if(cp.movie.vdm.slideVideoChannel0)
								cp.movie.vdm.videoViews.push(new cp.VideoView(cp.movie.vdm.slideVideoChannel0));
							if(cp.movie.vdm.slideVideoChannel1)
								cp.movie.vdm.videoViews.push(new cp.VideoView(cp.movie.vdm.slideVideoChannel1));
							if(cp.movie.vdm.tocVideoChannel0)
								cp.movie.vdm.videoViews.push(new cp.VideoView(cp.movie.vdm.tocVideoChannel0));
							if(cp.movie.vdm.tocVideoChannel1)
								cp.movie.vdm.videoViews.push(new cp.VideoView(cp.movie.vdm.tocVideoChannel1));
						}
						for(var i = 0; i < cp.movie.vdm.MAX_VIDEO_CHANNELS; ++i)
						{
							var v = cp.movie.vdm.videoChannels[i];
							cp.movie.vdm.videoViews.push(new cp.VideoView(v));
						}
					}
					else
					{
						for(var i in cp.movie.vdm.videoViews)
						{
							var v = cp.movie.vdm.videoViews[i];
							document.body.removeChild(v.view);
							--cp.MediaView.NUM_MEDIA_VIEWS;
						}
						delete cp.movie.vdm.videoViews;
					}
				}
				videoViewButton.innerHTML = "<font color='#000000' style='font-size:10px'>view</font>";
				document.body.appendChild(videoViewButton);
				
				var stopVideoWait = cp.newElem('div');
				stopVideoWait.style.cssText = "z-index:100;position:absolute;left:120px; top:90px; width:20px; height:20px;display:block;background-image:url(assets/htmlimages/hotspot_correct_answer_normal.png);opacity:1";
				stopVideoWait.onclick = function(){
					cp.movie.vdm.resetAllWaitingVideos();
				}
				stopVideoWait.innerHTML = "<font color='#000000' style='font-size:10px'>!Wait</font>";
				document.body.appendChild(stopVideoWait);
				
				var xcpnLogButton = cp.newElem('div');
				xcpnLogButton.style.cssText = "z-index:100;position:absolute;left:0px; top:120px; width:20px; height:20px;display:block;background-image:url(assets/htmlimages/hotspot_incorrect_answer_normal.png);opacity:"+(cp.exceptionalLogs?1:0.5);
				xcpnLogButton.onclick = function(){
					cp.exceptionalLogs = !cp.exceptionalLogs;
					xcpnLogButton.style.opacity = cp.exceptionalLogs?1:0.5;
				}
				xcpnLogButton.innerHTML = "<font color='#000000' style='font-size:10px'>ErrorExcpn</font>";
				document.body.appendChild(xcpnLogButton);
				
				var verboseLogButton = cp.newElem('div');
				verboseLogButton.style.cssText = "z-index:100;position:absolute;left:0px; top:150px; width:20px; height:20px;display:block;background-image:url(assets/htmlimages/hotspot_correct_answer_normal.png);opacity:"+(cp.verbose?1:0.5);
				verboseLogButton.onclick = function(){
					cp.verbose = !cp.verbose;
					verboseLogButton.style.opacity = cp.verbose?1:0.5;
				}
				verboseLogButton.innerHTML = "<font color='#000000' style='font-size:10px'>verbose</font>";
				document.body.appendChild(verboseLogButton);
				
				var disablePaceMakerButton = cp.newElem('div');
				disablePaceMakerButton.style.cssText = "z-index:100;position:absolute;left:0px; top:180px; width:20px; height:20px;display:block;background-image:url(assets/htmlimages/hotspot_correct_answer_normal.png);opacity:"+(cp.disablePaceMaker?0.5:1);
				disablePaceMakerButton.onclick = function(){
					cp.disablePaceMaker = !cp.disablePaceMaker;
					disablePaceMakerButton.style.opacity = cp.disablePaceMaker?0.5:1;
				}
				disablePaceMakerButton.innerHTML = "<font color='#000000' style='font-size:10px'>PaceMaker</font>";
				document.body.appendChild(disablePaceMakerButton);
				
				var seekLogButton = cp.newElem('div');
				seekLogButton.style.cssText = "z-index:100;position:absolute;left:0px; top:210px; width:20px; height:20px;display:block;background-image:url(assets/htmlimages/hotspot_correct_answer_normal.png);opacity:"+(cp.movie.ms.verbose?1:0.5);
				seekLogButton.onclick = function(){
					cp.movie.ms.verbose = !cp.movie.ms.verbose;
					seekLogButton.style.opacity = cp.movie.ms.verbose?1:0.5;
				}
				seekLogButton.innerHTML = "<font color='#000000' style='font-size:10px'>seekLogs</font>";
				document.body.appendChild(seekLogButton);
				
				if(cp.device != cp.IDEVICE)
				{
					var emulateIPadButton = cp.newElem('div');
					emulateIPadButton.style.cssText = "z-index:100;position:absolute;left:0px; top:240px; width:20px; height:20px;display:block;background-image:url(assets/htmlimages/hotspot_correct_answer_normal.png);opacity:"+((cp.device == cp.IDEVICE)?0.5:1);
					emulateIPadButton.onclick = function(){
						if(cp.origDevice)
						{
							cp.device = cp.origDevice;
							delete cp.origDevice;
						}
						else
						{
							cp.origDevice = cp.device;
							cp.device = cp.IDEVICE;
						}
						emulateIPadButton.style.opacity = ((cp.device == cp.IDEVICE)?0.5:1);
					}
					emulateIPadButton.innerHTML = "<font color='#000000' style='font-size:10px'>emulateiDevice</font>";
					document.body.appendChild(emulateIPadButton);
				}
				
				var customConsoleButton = cp.newElem('div');
				customConsoleButton.style.cssText = "z-index:100;position:absolute;left:0px; top:270px; width:20px; height:20px;display:block;background-image:url(assets/htmlimages/hotspot_correct_answer_normal.png);opacity:"+(cp.customConsole?0.5:1);
				customConsoleButton.onclick = function(){
					if(cp.customConsole)
					{
						document.body.removeChild(cp.customConsole);
						delete cp.customConsole;
					}
					else
					{
						cp.customConsole = cp.newElem('textarea');
						cp.customConsole.style.cssText = "z-index:100;position:absolute;left:0px; top:300px; width:300px; height:100px;display:block;";
						cp.customConsole.readonly = true;
						document.body.appendChild(cp.customConsole);
						cp.log('navigator.userAgent = '+ navigator.userAgent);
						cp.log('browser = ' + cp.browser);
						cp.log('browserVersion = '+cp.browserVersion);
						cp.log('device = ' + cp.device);
						if(cp.device == cp.IDEVICE)
						{
							cp.log('device flavor = ' + cp.deviceFlavor);
							cp.log('IOS Version = ' + cp.IOSMajor + '_' + cp.IOSMinor + '_' + cp.IOSBuild);
						}
					}
					customConsoleButton.style.opacity = cp.customConsole?0.5:1;
				}
				customConsoleButton.innerHTML = "<font color='#000000' style='font-size:10px'>customConsole</font>";
				document.body.appendChild(customConsoleButton);
			}
		}
		function establishSlideVideosContinuity()
		{
			var slideVideos = cp.D.project_main.slideVideos;
			if ( ! slideVideos )
				return;
				
			var i = 0;
			var j = 1;
			for(;j < slideVideos.length; ++i, ++j)
			{
				var v1ID = slideVideos[i];
				var v2ID = slideVideos[j];
				var v1 = cp.D[v1ID];
				var v2 = cp.D[v2ID];
				if(v1.to + 1 == v2.from)//continuous in timeline
				{
					var v1c = cp.D[v1.mdi];
					var v2c = cp.D[v2.mdi];
					if(Math.abs(v1c.vst - v2c.vsf) <= 0.1)//continuous in seek time
					{
						if(v1c.mp4 == v2c.mp4)//seeking from same source
						{
							v1c.continueToNextSlide = 1;
							v2c.continueFromPrevSlide = 1;
						}
					}
				}
			}
		}
		
		function connectSlideAudiosToSlides()
		{
			var slideAudioNames = (cp.D.project_main.slideAudios || "").split(',');
			var slideNames = (cp.D.project_main.slides || "").split(',');
			var jMax = slideAudioNames.length;
			var iMax = slideNames.length;
			var j = 0;
			for(var i = 0; i < iMax && j < jMax; ++i)
			{
				var slide = cp.D[slideNames[i]]
				if(!slide)
					break;

				var slideAudio = cp.D[slideAudioNames[j]];
				if(!slideAudio)
					break;

				if(slideAudio.from <= slide.to)
				{
					slide.audioName = slideAudioNames[j];
				}
				
				if(slide.to >= slideAudio.to)
					++j;
			}
		}
		
		function connectSlideVideosToSlides()
		{
			var slideNames = (cp.D.project_main.slides || "").split(',');
			var iMax = slideNames.length;
			for(var i = 0; i < iMax; ++i)
			{
				var slide = cp.D[slideNames[i]]
				if(!slide)
					break;

				var videos = '';
				for(var j in slide.si)
				{
					var item = slide.si[j];
					if(cp.kCPOTFLVItem == item.t || cp.kCPOTVideo == item.t || cp.kCPFullMotion == item.t || cp.kCPOTVideoResource == item.t)
					{
						if(!slide.videos)
							slide.videos = [];
						slide.videos.push(item.n);
					}
				}
			}
		}
		
		cp.CPProjInit();
		cp.shouldScale = cp.D.project.shc;	
		cp.responsive = cp.D["project_main"].useResponsive;
		
		/*if(cp.shouldScale)
		{
			var viewport = document.querySelector("meta[name=viewport]");
			if(viewport)
				viewport.setAttribute('content', 'initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0');
			else
				document.getElementsByTagName('head')[0].appendChild('<meta name="viewport" content="initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0">');
		}
		else
		{
			var viewport = document.querySelector("meta[name=viewport]");
			if(viewport)
				viewport.setAttribute('content', 'width=device-width,initial-scale=1.0');
			else
				document.getElementsByTagName('head')[0].appendChild('<meta name="viewport" content="width=device-width, initial-scale=1.0">');
		}*/

		if(cp.IsRunningInACAP || cp.IsRunningInALEC)
		{
			cp.D.playBarProperties.hasPlayBar = false;
			cp.D.borderProperties.hasBorder = false;
			cp.D.project.hasTOC = false;	
		}

		cp.loadedModules = {
			playbar : cp.D.playBarProperties.hasPlayBar && (cp('playbar') != undefined),
			border : cp.D.borderProperties.hasBorder,
			toc : cp.D.project.hasTOC && (cp('toc') != undefined)
		}
		
		if(cp.device == cp.IDEVICE)
		{
			if(cp.mat == undefined)
			{
				if(cp.IOSMajor <= cp.IOS5)
					cp.multiAudioTrack = false;
			}
			else
			{
				//INI file must have set cp.mat (as false)
				cp.multiAudioTrack = false;
			}
		}
		
		if(cp.device == cp.ANDROID)
		{
			cp.multiAudioTrack = true;
		}
		
		var lPools = cp.D.project_main.pools;
		if(lPools == undefined || lPools.length <= 0)
		{
			cp.poolManager = undefined;
		}
		else
		{
			cp.poolManager = new cp.PoolManager();
			cp.poolManager.loadPools();
			if(cp.g_ShouldRandomize)
				cp.poolManager.randomizePools();
		}
		PPTXLib.initializePPTXLibrary();
		establishSlideVideosContinuity();
		connectSlideAudiosToSlides();
		connectSlideVideosToSlides();
		
		if(cp.responsive)
		{
			if(cp.responsiveWidths == undefined)
				cp.responsiveWidths = cp.D["project"].cssWidths;

			if(cp.responsiveAllBPWidths == undefined)
				cp.responsiveAllBPWidths = cp.D["project"].allbpswidth;

			//cp.m_isPreview = !cp.IsRunningInRoboHelp && (cp.parentWindow && (cp.parentWindow.initializeResponsivePreview != undefined));
			//cp.m_isPreview will now be published from Captivate. No need of identifying at runtime
			if((cp.m_isPreview || cp.m_isLMSPreview) && cp.parentWindow.initializeResponsivePreview)
				cp.parentWindow.initializeResponsivePreview(cp.D.project.cssWidths,
															cp.D.project.w,
															cp.D.project.h,
															cp.D["project_main"].cBW,
															(cp.DESKTOP == cp.device));		

			cp.updateResponsiveGlobals();
		}
		
		cp.offsetInnerWidth = 0;
		cp.getInnerWidth();
		var pc = cp.getProjectContainer();
		if(cp.responsive)
		{
			pc.style.width = "100%";
			pc.style.height = "100%";
		}
		else
		{
			pc.style.width = cp.D.project.w + (cp.loadedModules.toc  &&  !cp.D.tocProperties.overlay ? cp.D.tocProperties.width : 0) + 'px';
			pc.style.height = cp.D.project.h + 'px';
		}	
		
		var mc = cp.getMainContainer();
		var lMainContainerLeft = (cp.offsetInnerWidth - parseFloat(mc.style.width))/2;
		
		if(cp.responsive)
		{
			mc.style.left = '0px';
		}
		else
		{
			mc.style.left = ( lMainContainerLeft > 0 ? lMainContainerLeft : 0 ) + 'px';	
		}
		
		if(!cp.playImage)
			cp.playImage	= cp('playImage');
		
		if(!cp.autoplayImage)
			cp.autoplayImage = cp('autoplayImage');
		
		if(!cp.autoplayDiv)
			cp.autoplayDiv = cp('autoplayDiv');
		
		if(!cp.gesturesDiv)
		{
			cp.gesturesDiv = cp('gestureIcon');
			if(cp.useg)
			{
				cp.gesturesDiv.style.display = "block";
				cp.registerGestureEvent(cp.gesturesDiv,cp.GESTURE_EVENT_TYPES.TAP,cp.showGesturesHint);
			}
			else
			{
				cp.gesturesDiv.style.display = "none";
			}
		}	

		if(cp.device != cp.DESKTOP)
		{
			cp.playImage.className = "autoPlayButton";
			if(cp.useg)
				cp.gesturesDiv.style.display = "block";
		}
		else
		{
			var lShouldAutoplay = cp.D["project_main"].autoplay;
			if(!lShouldAutoplay)
				cp.playImage.className = "autoPlayButton";

			cp.gesturesDiv.style.display = "none";
		}

		if(!cp.ccdv)
		{
			cp.ccdv = cp('cc');
			cp.fixWebkitScaling(cp.ccdv);
		}	

		if(!cp.pwdv)
			cp.pwdv = cp('pwdv');		
		
		if(!cp.exdv)
			cp.exdv = cp('exdv');
		
		if(!cp.preloaderImage)
			cp.preloaderImage = cp('preloaderImage');
			
		if(cp.movie == undefined)
		{
			cp.movie = new cp.Movie(cp('project'));
			
			cp.eventManager = new cp.EventManager();
			cp.variablesManager = new cp.VariablesManager();
			cp.movie.audioManager = new cp.AudioManager();
			cp.movie.videoManager = new cp.VideoManager();
			cp.movie.mediaSeeker = new cp.MediaSeeker();
			
			if(!cp.g_ShouldRandomize)
				cp.NewQuizLibraryInit();
			
			cp.movie.vdm.load();
			cp.movie.am.load();
			var slideName = cp.movie.stage.getSlideNameForIndex(0);
			if(cp.multiAudioTrack)
			{
				if(slideName != '')
				{
					cp.movie.am.preload(slideName);
				}
			}
			if(slideName != '')
				cp.movie.vdm.preload(slideName);
			
			cp.movie.imageManager = new cp.ImageManager();
			cp.movie.prefetchManager = new cp.PrefetchManager();
			cp.movie.handleProjectOptions();		
			
			cp.movie.pm.preloadSlideAssets(0);
			cp.movie.topOffset = 0;
			
			var p = cp.getProject();
			if(!cp.responsive)
			{
				p.style.left = (cp.loadedModules.toc  &&  !cp.D.tocProperties.overlay && (cp.D.tocProperties.position == 1) ? cp.D.tocProperties.width : 0) + "px";
			}		
		}

		var slideDiv = cp.movie.stage.getSlideDiv();;
		if (slideDiv) {
			slideDiv.ondblclick = cp.handleDblClick;
			slideDiv.oncontextmenu = cp.handleRightClick;
		}
		
		cp.ccInit(cp.D.ccProperties);
		if(cp.loadedModules.border)
			cp.borderInit(cp.D);
		if(cp.loadedModules.playbar)
			cp.playBarInit(cp.D);
		else
			cp.setMovieLeftTopRightBottom(0,0,0,0);
		
		if(cp.loadedModules.toc && cp.responsive)
			cp.tocInit(cp.D,0,0,0,0);
		
		cp('project').style.zIndex = 1;
		if(cp.loadedModules.toc)	
			cp('toc').style.zIndex = 2;
		if(cp.loadedModules.playbar)		
			cp('playbar').style.zIndex = 3;
		
		cp.ccdv = cp('cc');
		cp.pwdv = cp('pwdv');		
		cp.exdv = cp('exdv');

		if(cp.ccdv)
			cp.ccdv.style.zIndex = 4;	
		if(cp.gesturesDiv)
			cp.gesturesDiv.style.zIndex = 4;
		if(cp.pwdv)
			cp.pwdv.style.zIndex = 5;
		if(cp.exdv)
			cp.exdv.style.zIndex = 6;

		if(cp.m_isPreview && !cp.m_isEdgeInspectPreview){
			if(!cp.responsive){
				var geoVars = cp.vm.getGeoVarsInfo();
				if(geoVars.length > 0){
					if(!cp.fakeGeo){
						cp.fakeGeo = document.createElement('div');
						cp.fakeGeo.id = 'cpFakeGeo';

						var fakeGeoTitle = document.createElement('div');
						fakeGeoTitle.innerHTML = cp.D.geoProps.geoEmul || 'Emulate Geolocation';

						fakeGeoTitle.id = 'cpFakeGeoTitle';
						cp.fakeGeo.appendChild(fakeGeoTitle);

						var fakeGeoList = document.createElement('select');
						fakeGeoList.id = 'cpFakeGeoList';
						var fakeGeoLocationNowhere = cp.D.geoProps.geoNone;
						if(!fakeGeoLocationNowhere)
							fakeGeoLocationNowhere = 'nowhere';

						fakeGeoList.options[0] = new Option('<' + fakeGeoLocationNowhere + '>', '');
						for(var i in geoVars){
							fakeGeoList.options[fakeGeoList.options.length] = new Option(geoVars[i].name, cp.vm.getVariableValue(geoVars[i].name));
						}
						fakeGeoList.addEventListener('change', function(e){
							//console.log('faking cpInfoGeoLocation to ' + fakeGeoList.value);
							cpInfoGeoLocation = fakeGeoList.value;
						});

						cp.fakeGeo.appendChild(fakeGeoList);
						cp.fakeGeo.style.zIndex = 7;

						document.body.appendChild(cp.fakeGeo);
					}
				}
			}
		}	

		CPInitDebugControls();
		if(this.m_gestureHandler)
			this.m_gestureHandler.addCPEventListeners();
	}

	function getGeoLocationValues(geoVarsInfo){
		var result = [];
		for(var i in geoVarsInfo){
			result.push(cp.vm.getVariableValue(geoVarsInfo[i].name));
		}
		return result;
	}

	cp.CPPostInit = function()
	{	
	    cp.initObjectFactory();
		if(cp.loadedModules.playbar)
			cp.setPlaybarCallback(cp.movie);
		if(cp.loadedModules.toc)
			cp.setTOCCallback(cp.movie,cp.em);
		
		if(typeof(cptb) != 'undefined')
			cptb.PostInit();
		
		cp.adjustWindow();
		setTimeout("window.scrollTo(0,0);",500);

		cp.movie.startTimer();	
		window.onorientationchange = window.onresize = cp.adjustWindow;

		if(cp.responsive)
		{
			if(!cp.IsRunningInRoboHelp && cp.parentWindow && cp.parentWindow.createSliders)
				cp.parentWindow.createSliders(cp.D.project.cssWidths,
												cp.getCurrentSlideResponsiveHeight(cp.D["project_main"].cBW),
												cp.D["project_main"].cBW);
		}
	
		var bIsResponsiveProjectPreview = (cp.m_isPreview && !cp.m_isEdgeInspectPreview && cp.responsive);

		window.addEventListener('message', function(e){
			if(bIsResponsiveProjectPreview){
				if(window.location.origin != e.origin)
					return;
				if(e.data == 'cpgetGeoVarsInfo'){
					var info = cp.vm.getGeoVarsInfo();
					e.source.postMessage('cpfakeGeo' + JSON.stringify({
						'geoVarsInfo':info,
						'geoValues':getGeoLocationValues(info),
						'title':cp.D.geoProps.geoEmul,
						'dfltLoc':cp.D.geoProps.geoNone
					}), e.origin);
					return;
				}
				else if(e.data.substr(0,9) == 'cpfakeGeo'){
					cpInfoGeoLocation = e.data.substr(9);
					return;
				}
			}

			var dataObj = JSON.parse(e.data);
			if(dataObj && dataObj.hasOwnProperty('cpParentRequestToRelaxBrowserCheck'))
			{
				if(dataObj['cpParentRequestToRelaxBrowserCheck'] == true)
				{
					cp.vm.setVariableValue('cpInfoParentRequestToRelaxBrowserCheck',true);
				}
				else
				{
					cp.vm.setVariableValue('cpInfoParentRequestToRelaxBrowserCheck',false);
				}
			}
		}, false);

		if(bIsResponsiveProjectPreview){
			if(window.parent && window.parent.postMessage)
			{
					if((cp.MSIE == cp.browser || cp.FIREFOX == cp.browser) && window.location.protocol == 'file:'){
						//postMessage leads to a syntax error when origin == "file://" stalling the preview
						//we don't want to use origin = "*" due to security issues
						//==> geo location emulation will not work
					}
					else{
						if (!window.location.origin) {
						  window.location.origin = window.location.protocol + "//" + window.location.hostname + (window.location.port ? ':' + window.location.port: '');
						}
						window.parent.postMessage('cpindexInited', window.location.origin);
					}
			}
		}
	}
})();
